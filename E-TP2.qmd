# TP2 : Tableaux de données


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(eval = FALSE)

data(flights)
```


```{r, eval=F, echo=F}

library(tidyverse)

data("mtcars")

mtcars1 <- select(mtcars,disp, hp)
mtcars1 <- filter(mtcars,disp, hp)

select
filter


mtcars %>% 
  select(cyl, disp, hp) %>% 
    rename(horsepower = hp) %>%
     mutate(horsepower = 2 * horsepower,
           disp.hp = disp / horsepower) %>%
       group_by(cyl) %>%
         summarize(disp=mean(disp), 
                   horsepower=mean(horsepower),
                   nb = n())



```




On commence par charger les extensions et les données nécessaires.

```{r echo=TRUE, message=FALSE, warning=FALSE}
library(tidyverse)
library(nycflights13)
data(flights)
data(airports)
data(airlines)
```

## Les verbes de base de `dplyr`

**Exercice 1.1**

Sélectionner la dixième ligne du tableau des aéroports (`airports`).

```{r echo=FALSE, ref.label='dp11'}
airports[10,]
```

::: solution-exo
```{r dp11, eval=FALSE}
slice(airports, 10)
```
:::

Sélectionner les 5 premières lignes de la table `airlines`.

```{r echo=FALSE, ref.label='dp11b'}
```

::: solution-exo
```{r dp11b, eval=FALSE}
slice_head(airlines, n = 5)
airports[1:10,]
```
:::

Sélectionner l'aéroport avec l'altitude la plus basse.

```{r echo=FALSE, ref.label='dp11c'}
airports
```

::: solution-exo
```{r dp11c, eval=FALSE}
slice_min(airports, alt)
```
:::

**Exercice 1.2**

Sélectionnez les vols du mois de juillet (variable `month`).

```{r echo = FALSE, ref.label='dp12'}
```

::: solution-exo
```{r dp12, eval=FALSE}
filter(flights, month == 7)

month.name[(flights$month)]
```
:::

Sélectionnez les vols avec un retard à l'arrivée (variable `arr_delay`) compris entre 5 et 15 minutes.

```{r echo = FALSE, ref.label='dp12b'}
```

::: solution-exo
```{r dp12b, eval=FALSE}
filter(flights, arr_delay >= 5 & arr_delay <= 15)
```
:::

Sélectionnez les vols des compagnies Delta, United et American (codes `DL`, `UA` et `AA` de la variable `carrier`).

```{r echo=FALSE, ref.label='dp12c'}
```

::: solution-exo
```{r dp12c, eval=FALSE}
filter(flights, carrier %in% c("DL", "UA", "AA"))
```
:::

**Exercice 1.3**

Triez la table `flights` par retard au départ décroissant.

```{r echo = FALSE, ref.label='dp13'}
```

::: solution-exo
```{r dp13, eval=FALSE}
arrange(flights, desc(dep_delay))
```
:::

**Exercice 1.4**

Sélectionnez les colonnes `name`, `lat` et `lon` de la table `airports`

```{r, echo = FALSE, ref.label='dp14'}
```

::: solution-exo
```{r dp14, eval=FALSE}
select(airports, name, lat, lon)
```
:::

Sélectionnez toutes les colonnes de la table `airports` sauf les colonnes `tz` et `tzone`

```{r, echo = FALSE, ref.label='dp14b'}
```

::: solution-exo
```{r dp14b, eval=FALSE}
select(airports, -tz, -tzone)
```
:::

Sélectionnez toutes les colonnes de la table `flights` dont les noms se terminent par "delay".

```{r, echo = FALSE, ref.label='dp14c'}
```

::: solution-exo
```{r dp14c, eval=FALSE}
select(flights, ends_with("delay"))
```
:::

Dans la table `airports`, renommez la colonne `alt` en `altitude` et la colonne `tzone` en `fuseau_horaire`.

```{r, echo = FALSE, ref.label='dp14d'}
```

::: solution-exo
```{r dp14d, eval=FALSE}
rename(airports, altitude = alt, fuseau_horaire = tzone)
```
:::

**Exercice 1.5**

Dans la table `airports`, la colonne `alt` contient l'altitude de l'aéroport en pieds. Créer une nouvelle variable `alt_m` contenant l'altitude en mètres (on convertit des pieds en mètres en les divisant par 3.2808). Sélectionner dans la table obtenue uniquement les deux colonnes `alt` et `alt_m`.

```{r echo=FALSE, ref.label='dp15'}
```

::: solution-exo
```{r dp15, eval=FALSE}
tmp <- mutate(airports, alt_m = alt / 3.2808)
select(tmp, alt, alt_m)
```
:::

## Enchaîner des opérations

**Exercice 2.1**

Réécrire le code de l'exercice précédent en utilisant le *pipe* `%>%`.

```{r echo=FALSE, eval=FALSE, ref.label='dp21'}
```

::: solution-exo
```{r dp21, eval=FALSE}
airports %>%
  mutate(alt_m = alt / 3.2808) %>%
  select(alt, alt_m)
```
:::

**Exercice 2.2**

En utilisant le *pipe*, sélectionnez les vols à destination de San Francico (code `SFO` de la variable `dest`) et triez-les selon le retard au départ décroissant (variable `dep_delay`).

```{r echo=FALSE, ref.label='dp22'}
```

::: solution-exo
```{r dp22, eval=FALSE}
flights %>%
  filter(dest == "SFO") %>%
  arrange(desc(dep_delay))
```
:::

**Exercice 2.3**

Sélectionnez les vols des mois de septembre et octobre, conservez les colonnes `dest` et `dep_delay`, créez une nouvelle variable `retard_h` contenant le retard au départ en heures, et conservez uniquement les 5 lignes avec les plus grandes valeurs de `retard_h`.

```{r echo=FALSE, ref.label='dp23'}
```

::: solution-exo
```{r dp23, eval=FALSE}
flights %>%
  filter(month %in% c(9, 10)) %>%
  select(dest, dep_delay) %>%
  mutate(retard_h = dep_delay / 60) %>%
  slice_max(retard_h, n = 5)
```
:::

### `group_by` et `summarise`

**Exercice 3.1**

Affichez le nombre de vols par mois.

```{r echo = FALSE, ref.label='dp31'}
```

::: solution-exo
```{r dp31, eval=FALSE}
flights %>%
  count(month)
```
:::

Triez la table résultat selon le nombre de vols croissant.

```{r echo = FALSE, ref.label='dp31b'}
```

::: solution-exo
```{r dp31b, eval=FALSE}
flights %>%
  count(month) %>%
  arrange(n)
```
:::

**Exercice 3.2**

Calculer la distance moyenne des vols selon l'aéroport de départ (variable `origin`).

```{r echo=FALSE, ref.label='dp32'}
```

::: solution-exo
```{r dp32, eval=FALSE}
flights %>%
  group_by(origin) %>%
  summarise(distance_moyenne = mean(distance))
```
:::

**Exercice 3.3**

Calculer le nombre de vols à destination de Los Angeles (code `LAX`) pour chaque mois de l'année.

```{r echo = FALSE, ref.label='dp33'}
```

::: solution-exo
```{r dp33, eval=FALSE}
flights %>%
  filter(dest == "LAX") %>%
  count(month)
```
:::

**Exercice 3.4**

Calculer le nombre de vols selon le mois et la destination.

```{r echo = FALSE, ref.label='dp34'}
```

::: solution-exo
```{r dp34, eval=FALSE}
flights %>%
  count(month, dest)
```
:::

Ne conserver, pour chaque mois, que la destination avec le nombre maximal de vols.

```{r echo = FALSE, ref.label='dp34b'}
```

::: solution-exo
```{r dp34b, eval=FALSE}
flights %>%
  count(month, dest) %>%
  group_by(month) %>%
  slice_max(n)
```
:::

**Exercice 3.5**

Calculer le nombre de vols selon le mois. Ajouter une colonne comportant le pourcentage de vols annuels réalisés par mois.

```{r echo = FALSE, ref.label='dp35'}
```

::: solution-exo
```{r dp35, eval=FALSE}
flights %>%
  count(month) %>%
  mutate(pourcentage = n / sum(n) * 100)
```
:::

**Exercice 3.6**

Calculer, pour chaque aéroport de départ et de destination, la durée moyenne des vols (variable air_time). Pour chaque aéroport de départ, ne conserver que la destination avec la durée moyenne la plus longue.

```{r echo = FALSE, ref.label='dp36'}
```

::: solution-exo
```{r dp36, eval=FALSE}
flights %>%
  group_by(origin, dest) %>%
  summarise(duree_moyenne = mean(air_time, na.rm = TRUE)) %>%
  # Le group_by suivant n'est pas obligatoire
  group_by(origin) %>%
  slice_max(duree_moyenne)
```
:::

### Jointures

**Exercice 4.1**

Faire la jointure de la table `airlines` sur la table `flights` à l'aide de `left_join`.

```{r echo = FALSE, message=FALSE, ref.label='dp41'}
```

::: solution-exo
```{r dp41, eval=FALSE}
flights %>%
  rename(carrier = carrier) %>%
   merge(airlines, by = "carrier" )

?left_join
?merge
```
:::

**Exercice 4.2**

À partir de la table résultat de l'exercice précédent, calculer le retard moyen au départ pour chaque compagnie, et trier selon ce retard décroissant.

```{r echo = FALSE, message=FALSE, ref.label='dp42'}
```

::: solution-exo
```{r dp42, eval=FALSE}
flights %>%
  left_join(airlines) %>%
  group_by(name) %>%
  summarise(retard_moyen = mean(dep_delay, na.rm = TRUE)) %>%
  arrange(desc(retard_moyen))
```
:::

**Exercice 4.3**

Faire la jointure de la table `airports` sur la table `flights` en utilisant comme clé le code de l'aéroport de destination.

```{r echo = FALSE, ref.label='dp43'}
```

::: solution-exo
```{r dp43, eval=FALSE}
flights %>%
  left_join(airports, by = c("dest" = "faa"))
```
:::

À partir de cette table, afficher pour chaque mois le nom de l'aéroport de destination ayant eu le plus petit nombre de vol.

```{r echo = FALSE, ref.label='dp43b'}
```

::: solution-exo
```{r dp43b, eval=FALSE}
flights %>%
  left_join(airports, by = c("dest" = "faa")) %>%
   count(month, name) %>%
    group_by(month) %>%
     slice_min(n)


```
:::

**Exercice 4.4**

Créer une table indiquant, pour chaque vol, uniquement le nom de l'aéroport de départ et celui de l'aéroport d'arrivée.

```{r echo=FALSE, ref.label='dp44'}
```

::: solution-exo
```{r dp44, eval=FALSE}

flights %>%
  left_join(airports, by = c("dest" = "faa")) %>% 
    rename(dest_name = name) %>%
      left_join(airports, by = c("origin" = "faa")) %>%
        rename(orig_name = name) %>%
          select(orig_name, dest_name)
```
:::

### Bonus

**Exercice 5.1**

Calculer le nombre de vols selon l'aéroport de destination, et fusionnez la table `airports` sur le résultat avec `left_join`. Stocker le résultat final dans un objet nommé `flights_dest`.

```{r dp51, eval=FALSE}
flights_dest <- flights %>%
  count(dest) %>%
  left_join(airports, by = c("dest"="faa"))
```
